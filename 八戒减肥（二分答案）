八戒减肥：

题目描述：
八戒看到悟空非常瘦，很羡慕，于是想锻炼减肥。 八戒的首选目标是把肚子减下去，于是八戒制定目标是一共做 n 个仰卧起坐，但是一开始他每天只能做m个仰卧起坐。但是根据他锻炼的强度，每7天，他可以在原来每天做的数量的基础上多做1个仰卧起坐。如果一开始他可以每天做1个仰卧起坐的话，我们可以列出八戒前10天的仰卧起坐的数量分别是： 1 1 1 1 1 1 1 2 2 2 这样他前10天共做了13个仰卧起坐。

输入格式：
输入包含两个整数第一个是八戒的目标n（0<n<10^18）

第二个数字为起始状态时八戒做仰卧起坐的基础数量 m(0<m<10^18)。（不要怀疑，八戒的寿命可是很长的哦）

输出格式：
输出只有一个整数，表示，八戒在第几天结束时可以完成全部的任务

样例：
输入数据 1:
12 1

输出数据 1:
10

代码：
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
ll n; 
ll m;
/*
功能：判断前t个完整周期的总仰卧起坐数量是否小于目标n
每个周期为7天，第t个周期每天做 (m + t - 1) 个仰卧起坐
返回值：true表示前t个周期总和小于n，false表示不小于n
*/
bool fun(ll t){//t:周期数
    if(t==0)return true;
    //计算t*m(前面) //基础数量，就是不加t*(t-1)/2
    ll a;//a:存储t*m的计算结果
    if(m!=0){
        a=t*m;//a:存储乘积(t*m) ，加了多少次1 
    }else{
        a=0;
    }
    //计算t*(t-1)/2 (中间) //因"每个周期每天的仰卧起坐数量+1"增加的数量 
    ll b=0;//b:存储t*(t-1)/2
    if(t>1){
        b=t*(t-1)/2;
    }
    //计算a + b //每天的仰卧起坐数量之和
    //前t个是否小于n
    return 7*(a+b)<=n;
}
int main() {
    cin>>n>>m;
    ll l=0;//l:左
    ll h=2e9;//h:右 
    ll bt;//bt:最大周期
    while(l<=h){
        ll mid=l+(h-l)/2;
        //前mid个是否小于n
        if(fun(mid)){//如果 7*(a+b)<=n
            bt=mid;//满足条件，更新
            l=mid+1;//找更大的 
        }else{
            h=mid-1;
        }
    }
    //剩余数量
    ll a=bt*m;//a:前面总和
    ll b=(bt>0)?(bt*(bt-1)/2):0;//b:中间总和
    ll r=n-7*(a+b);//r:剩余数量
    //计算完成剩余数量需要的天数
    ll c=m+bt;//c:当前每天数量
    ll d=(r+c-1)/c;//d:天数
    ll td=bt*7+d;//td:总天数
    cout<<td;
    return 0;
}
