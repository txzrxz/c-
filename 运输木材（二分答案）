运输木材：

题目描述：
木材厂堆着 n 根大木头，老板派一辆卡车将木头运走，卡车至少要装载 m 根才能发车。 现在使用机器将 n 根大木头切割成长度相等的小木头，当然希望小木头越长越好，
这样才能少浪费木材。 请利用所学的知识，帮忙计算小木头的最大长度，交给切割师傅。

输入格式：
第一行两个正整数 n 和 m，分别代表大木头的数量，卡车的装载量 m 根。 接下来 n 行，每行一个正整数 ai​，表示每根大木头的长度。

输出格式：
一个正整数，表示小木头的最大长度。如果切不出来，输出 0。

样例：
输入数据 1：
4 7
18
6
11
7

输出数据 1：
5

代码：
#include <bits/stdc++.h>
using namespace std;
/*
二分答案: 二分答案是一种通过二分搜索可能解来找到最优解的技术，
通常用于求解最大值最小化或最小值最大化的问题。
思路：
1. 找到要二分的答案的范围。
2. l是最小的数(1)，r是最大可能的数(题目给的范围，这里假设为1e8，即1亿)。
3. while(l<=r)
4. 检查当前mid是否是正确的，正确的可能就是答案。
   (自己写检查函数，不同题目的检查代码可能会不同)
*/
int n,m,a[100001];
// n: 大木头的数量, m: 卡车的装载量, a: 每根大木头的长度数组
// 检查函数：判断是否可以用长度为d的小木头切割出至少m根
bool check(int d){
    int sum=0;// 记录当前长度d下能切割出的小木头数量
    for(int i=0;i<n;i++){
        sum+=(a[i]/d);// 计算当前大木头能切割出的小木头数量
    }
    return sum>=m;// 如果能切割出的小木头数量大于等于m，则返回true
}
int main() {
    cin>>n>>m;// 输入大木头的数量n和卡车的装载量m
    for(int i=0;i<n;i++){
        cin>>a[i];// 输入每根大木头的长度
    }
    int l=1,r=1e8,ans=1;// l: 二分搜索的左边界, r: 二分搜索的右边界
    // ans: 最终答案
    while(l<=r){
        int mid=(l+r)/2;// 计算中间值mid
        if(check(mid)){// 如果当前mid满足条件
            ans=mid;// 更新答案
            l=mid+1;// 尝试更大的长度
        }else{
            r=mid-1;// 尝试更小的长度
        }
    }
    cout<<ans;// 输出最终答案
    return 0;
}
