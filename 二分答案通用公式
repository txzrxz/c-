#include <bits/stdc++.h>
using namespace std;
/*
二分答案:二分答案是一种通过二分搜索可能解来找到最优解的技术，
通常用于求解最大值最小化或最小值最大化的问题 
思路： 
1. 找到要二分的答案的范围
2. l是最小的数(1),r是最大可能的数(题目给的范围，这里假设为100000)
3. while(l<=r)
4. 检查当前mid是否是正确的，正确的可能就是答案
   (自己写检查函数，不同题目的检查代码可能会不同)
*/
int n,k; // n: 矩形的数量, k: 需要的最小面积块数
int h[100001],w[100001];// h: 每个矩形的长, w: 每个矩形的宽
// 检查函数：判断是否可以用边长为d的正方形覆盖至少k个面积块
bool check(int d){
    int ans=0;// 记录当前边长d下能覆盖的面积块数
    for(int i=0;i<n;i++){
        ans+=(h[i]/d)*(w[i]/d);// 计算当前矩形能切割出的正方形数量
    }
    return ans>=k;// 如果能覆盖的面积块数大于等于k，则返回true
}
int main() {
    cin>>n>>k;// 输入数量n和需要的最小面积块数k
    for(int i=0;i<n;i++){
        cin>>h[i]>>w[i]; // 输入每个矩形的长和宽
    }
    int l=1,r=100000,ans=1;// l: 二分搜索的左边界, r: 二分搜索的右边界, ans: 最终答案
    while(l<=r){
        int mid=(l+r)/2; // 计算中间值mid
        if(check(mid)){// 如果当前mid满足条件
            ans=mid;// 更新答案
            l=mid+1;// 尝试更大的
        }else{
            r=mid-1;// 尝试更小的
        }
    }
    cout<<ans;// 输出最终答案
    return 0;
}
