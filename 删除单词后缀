# 📝 删除单词后缀

## 📋 题目描述
给定一个单词，如果该单词以 **er**、**ly** 或者 **ing** 后缀结尾，则删除该后缀（题目保证删除后缀后的单词长度不为0），否则不进行任何操作。

## 📥 输入格式
输入一行，包含一个单词（单词中间没有空格，每个单词最大长度为32）。

## 📤 输出格式
输出按照题目要求处理后的单词。

## 📝 样例

### 输入样例
```
referer
```

### 输出样例
```
refer
```

## 💡 解题思路

这是一道典型的**字符串处理**题目，核心思想是：
1. 读入字符串
2. 检查字符串的结尾是否匹配特定后缀
3. 如果匹配，就删除对应的后缀
4. 输出处理后的结果

**关键点**：
- 需要检查三种后缀：`er`（2个字符）、`ly`（2个字符）、`ing`（3个字符）
- 使用 `substr()` 函数来截取字符串
- 注意字符串索引从0开始

## 📝 代码实现

```cpp
#include<bits/stdc++.h>
using namespace std;

int main() {
    string s;
    cin >> s;
    int len = s.size(); // 获取字符串长度
    
    // 检查是否以 "er" 结尾
    if(len >= 2 && s[len-2] == 'e' && s[len-1] == 'r') {
        s = s.substr(0, len-2);
    }
    // 检查是否以 "ly" 结尾
    else if(len >= 2 && s[len-2] == 'l' && s[len-1] == 'y') {
        s = s.substr(0, len-2);
    }
    // 检查是否以 "ing" 结尾
    else if(len >= 3 && s[len-3] == 'i' && s[len-2] == 'n' && s[len-1] == 'g') {
        s = s.substr(0, len-3);
    }
    
    cout << s << endl;
    return 0;
}
```

## 🔍 代码解析

### 主要步骤：
1. **读入字符串**：使用 `cin >> s` 读入单词
2. **获取长度**：`s.size()` 获取字符串长度
3. **后缀检查**：从后往前检查字符是否匹配
4. **字符串截取**：使用 `substr(0, len-n)` 删除后n个字符

### 关键函数：
- **`s.size()`**：返回字符串长度
- **`s[index]`**：访问字符串中指定位置的字符
- **`s.substr(start, length)`**：从start位置开始截取length长度的子字符串

### 优化建议：
可以使用更简洁的写法：
```cpp
if(s.size() >= 2 && s.substr(s.size()-2) == "er") {
    s = s.substr(0, s.size()-2);
}
```

### 时间复杂度：
- O(1)，只需要检查字符串末尾的几个字符

这道题帮助我们掌握字符串的基本操作，是很好的入门练习！🌟
