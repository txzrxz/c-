描述：

扫雷游戏是一款十分经典的单机小游戏。在 n行 m 列的雷区中有一些格子含有地雷（称之为地雷格），其他格子不含地雷（称之为非地雷格）。玩家翻开一个非地雷格时，该格将会出现一个数字——提示周围格子中有多少个是地雷格。游戏的目标是在不翻出任何地雷格的条件下，找出所有的非地雷格。
现在给出n行m列的雷区中的地雷分布，要求计算出每个非地雷格周围的地雷格数。
注：一个格子的周围格子包括其上、下、左、右、左上、右上、左下、右下八个方向上与之直接相邻的格子。

输入描述：

输入文件第一行是用一个空格隔开的两个整数n和m，分别表示雷区的行数和列数。
接下来 n行，每行m 个字符，描述了雷区中的地雷分布情况。字符’*’表示相应格子是地雷格，字符’?’表示相应格子是非地雷格。相邻字符之间无分隔符。

输出描述：

输出文件包含 n 行，每行 m 个字符，描述整个雷区。用’*’表示地雷格，用周围的地雷个数表示非地雷格。相邻字符之间无分隔符。

用例输入 1 

3 3
*??
???
?*?
用例输出 1 

*10
221
1*1
用例输入 2 

2 3
?*?
*??
用例输出 2 

2*1
*21

提示：

对于 100%的数据，1≤n≤100,1≤m≤100。

来源：

noip复赛 二维数组



代码：
#include<bits/stdc++.h>
using namespace std;
int main() {
	int n,m;//n:行,m:列 
	cin>>n>>m;
	char a[n][m];                     
	for(int i=0;i<n;i++){
		for(int j=0;j<m;j++){
			cin>>a[i][j];
		}
	}
	for(int i=0;i<n;i++){
		for(int j=0;j<m;j++){
			if(a[i][j]=='*'){
				cout<<'*';
			}else{                            //i:行 j:列 
				int sum=0;
				
				if(a[i-1][j-1]=='*'){//左上角 
				if(i-1>=0 && i-1<n && j-1>=0 && j-1<m){
						sum+=1;
					}
				}
				if(a[i-1][j]=='*'){//上方 
				if(i-1>=0 && i-1<n && j>=0 && j<m){
						sum+=1;
					}
				}
				if(a[i-1][j+1]=='*'){//右上角 
				if(i-1>=0 && i-1<n && j+1>=0 && j+1<m){
						sum+=1;
					}
				}
				if(a[i][j-1]=='*'){//左方 
				if(i>=0 && i<n && j-1>=0 && j-1<m){
						sum+=1;
					}
				}
				if(a[i][j+1]=='*'){//右方 
				if(i>=0 && i<n && j+1>=0 && j+1<m){
						sum+=1;
					}
				}
				if(a[i+1][j-1]=='*'){//左下角 
				if(i+1>=0 && i+1<n && j-1>=0 && j-1<m){
						sum+=1;
					}
				}
				if(a[i+1][j]=='*'){//下方 
				if(i+1>=0 && i+1<n && j>=0 && j<m){
						sum+=1;
					}
				}
				if(a[i+1][j+1]=='*'){//右下角
				if(i+1>=0 && i+1<n && j+1>=0 && j+1<m){ 
						sum+=1;
					}
				}
				cout<<sum;
			}
		}
	cout<<endl;
	}
	return 0;
}
