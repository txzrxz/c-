交换瓶子：

题目描述：
有 N 个瓶子，编号 1∼N，放在架子上。 比如有 5 个瓶子： 2 1 3 5 4 要求每次拿起2个瓶子，交换它们的位置。 经过若干次后，使得瓶子的序号为： 1 2 3 4 5 对于这么简单的情况，显然，至少需要交换 2 次就可以复位。 如果瓶子更多呢？你可以通过编程来解决。

输入格式：
第一行: 一个正整数 N（N<100）, 表示瓶子的数目。 第二行：N 个正整数，用空格分开，表示瓶子目前的排列情况。

输出格式：
输出数据为一行一个正整数，表示至少交换多少次，才能完成排序。

样例：
输入数据 1：
5
2 1 3 5 4

输出数据 1：
2

代码：
#include <bits/stdc++.h>
using namespace std;
// 选择排序并计算交换次数
// 参数：
//   a - 要排序的数组
//   n - 数组中元素的数量
// 返回值：排序过程中发生的交换次数
int fun(int a[],int n) {
    int c=0;  // c：记录交换次数
    // 外层循环：控制已排序部分的末尾位置
    for(int i=0;i<n-1;i++){
        int m=i;// m：记录未排序部分中最小元素的索引
        // 内层循环：在未排序部分寻找最小元素
        for(int j=i+1;j<n;j++){
            if(a[j]<a[m]){
                m=j;// 更新最小元素索引
            }
        }
        // 如果最小元素不在当前位置，则交换并计数
        if(m!=i){
            int t=a[m];// t：临时变量，用于交换元素
            a[m]=a[i];
            a[i]=t;
            c++;// 交换次数加1
        }
    }
    return c;// 返回总交换次数
}
int main() {
    int n;// n：瓶子的数量
    cin>>n;// 输入瓶子数量
    int a[n];// a：存储瓶子当前的排列情况
    for(int i=0;i<n;i++){
        cin>>a[i];// 输入瓶子的初始排列
    }
    // 调用函数计算并输出最少交换次数
    cout<<fun(a,n)<<endl;
    return 0;
}
