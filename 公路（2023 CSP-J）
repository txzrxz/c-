公路：

题目描述：
小苞准备开着车沿着公路自驾。

公路上一共有 n 个站点，编号为从 1 到 n。其中站点 i 与站点 i+1 的距离为 vi公里。

公路上每个站点都可以加油，编号为 i 的站点一升油的价格为 ai元，且每个站点只出售整数升的油。

小苞想从站点 1 开车到站点 n，一开始小苞在站点 1 且车的油箱是空的。已知车的油箱足够大，可以装下任意多的油，且每升油可以让车前进 d 公里。问小苞从站点 1 开到站点 n，至少要花多少钱加油？

输入格式：
输入的第一行包含两个正整数 n 和 d，分别表示公路上站点的数量和车每升油可以前进的距离。 输入的第二行包含 n−1 个正整数 v1,v2…v(n−1)，分别表示站点间的距离。 输入的第三行包含 n 个正整数 a1,a2…an，分别表示在不同站点加油的价格。

输出格式：
输出一行，仅包含一个正整数，表示从站点 1 开到站点 n，小苞至少要花多少钱加油。

样例：
输入数据 1：
5 4
10 10 10 10
9 8 9 6 5

输出数据 1：
79

对于所有测试数据保证：1≤n≤10^5，1≤d≤10^5，1≤vi≤10^5，1≤ai≤10^5。

代码：
#include <bits/stdc++.h>
using namespace std;
/*
n:站点总数
d:每升油行驶距离（公里）
v:站点间距(n-1段路)
a:油价(每站点)
cost:总花费
oil:剩余油量(可行驶公里数)
min_price:途经站点的历史最低油价
need:当前路段需补充油量(向上取整)
*/ 
int main() {
    int n,d;// n:站点总数, d:每升油行驶距离（公里）
    cin>>n>>d;
    vector<int>v(n-1),a(n);// v:站点间距(n-1段路), a:油价(每站点)
    // 读取路段距离(下标0~n-2)
    for(int i=0;i<n-1;i++)cin>>v[i];
    // 读取站点油价(下标0~n-1)
    for(int i=0;i<n;i++)cin>>a[i];
    long long cost=0,oil=0;// cost:总花费, oil:剩余油量(可行驶公里数)
    int min_price=a[0];// min_price:途经站点的历史最低油价  
    for(int i=0;i<n-1;i++){// 遍历n-1段路径
        // 刷新最低油价(含当前站点)
        if(a[i]<min_price){
        	min_price=a[i];	
		}
        // need:当前路段需补充油量(向上取整)
        int need=(v[i]-oil+d-1)/d;// 公式解析：(gap+d-1)/d = ceil(gap/d)
        cost+=need*min_price;// 按历史最低价购买所需油量
        oil+=need*d-v[i];// 更新剩余油量:新购油-消耗油
    }
    cout<<cost<<endl;
    return 0;
}


更简短的代码：
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
ll n,d,v[100010],a[100010],mn=0x3f3f3f3f;
ll D;//存油箱里的油能走多远 
ll ans; 
int main() {
	cin>>n>>d;
	for(int i=1;i<n;i++)cin>>v[i];
	for(int i=1;i<=n;i++)cin>>a[i];
	for(int i=1;i<=n-1;i++){
		mn=min(mn,a[i]);//求最小油价
		if(D>=v[i]){
			D-=v[i];//不需要加油，消耗油箱里的油 
		}else{
			ll t=v[i]-D;//需要加走多远的油
			ll num=ceil(t*1.0/d);//(t+d-1)/d  求油的数量
			ans+=mn*num;//累加价格
			D+=num*d-v[i]; 
		}
	}
	return 0;
}
