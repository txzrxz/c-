黑白方块：

题目描述：
小杨有一个 n 行 m 列的网格图，其中每个格子要么是白色，要么是黑色。 小杨想知道网格图中是否存在一个满足如下条件的子矩形：子矩形由 4 行 4 列组成；子矩形的第 1 行和第 4 行只包含白色格子；
对于子矩形的第 2 行和第 3 行，只有第 1 个和第 4 个格子是白色的，其余格子都是黑色的；请你编写程序帮助小杨判断。

输入格式：
第一行包含一个正整数 t，代表测试用例组数。接下来是 t 组测试用例。对于每组测试用例，一共 n+1n+1 行。第一行包含两个正整数 n,mn,m，含义如题面所示。之后 n 行，每行一个长度为 m 的 01 串，
代表网格图第 i 行格子的颜色，如果为 0，则对应格子为白色，否则为黑色。

输出格式：
对于每组测试用例，如果存在，输出 Yes，否则输出 No。

输入输出样例 #1：
输入 #1：
3
1 4
0110
5 5
00000
01100
01100
00001
01100
5 5
00000
01100
01110
00001
01100

输出 #1：
No
Yes
No

说明/提示：
样例 1 解释：
0000
0110
0110
0000

数据规模与约定：
对全部的测试数据，保证 1≤t≤101≤t≤10，1≤n,m≤1001≤n,m≤100。

代码：
硬计算
#include <bits/stdc++.h>
using namespace std;
char h[10000][10001];
bool are=false;
int main() {
	int t;
    cin>>t;
    int n,m;
    for(int q=1;q<=t;q++){
        are=false;
        cin>>n>>m;//n:行 m:每行m个
        for(int i=0;i<n;i++){
		        scanf("%s",h[i]); //输入每行的字符串
        }
        for(int i=0;i<=n-4;i++){
            // 列范围：确保j+3<m有4列空间
            for(int j=0;j<=m-4;j++){
                int h1=(h[i][j]=='0' && h[i][j+1]=='0' && h[i][j+2]=='0' && h[i][j+3]=='0');
                int h4=(h[i+3][j]=='0' && h[i+3][j+1]=='0' && h[i+3][j+2]=='0' && h[i+3][j+3]=='0');
                int h2=(h[i+1][j]=='0' && h[i+1][j+1]=='1' && h[i+1][j+2]=='1' && h[i+1][j+3]=='0');
                int h3=(h[i+2][j]=='0' && h[i+2][j+1]=='1' && h[i+2][j+2]=='1' && h[i+2][j+3]=='0');
                // 所有条件满足时，跳出内循环
                if (h1 && h2 && h3 && h4){
                    are=true;
                    break;
                }
            }
            if(are)break; // 找到后跳出外循环
        }
        if(are){
            cout<<"Yes"<<endl;
        }else{
            cout<<"No"<<endl;
        }
    }
    return 0;
}

循环计算：
#include <bits/stdc++.h>
using namespace std;
int n,m,t;
char a[101][101];
char b[4][4]={
	'0','0','0','0',
	'0','1','1','0',
	'0','1','1','0',
	'0','0','0','0'
};
bool check(int x,int y){
	for(int i=0;i<=3;i++){
		for(int j=0;j<=3;j++){
			if(a[x+i][y+i]!=b[i][j])return 0;
		}
	}
	return 1;
}
int main() {
	cin>>t;
	while(t--){
		cin>>n>>m;
		for(int i=1;i<=n;i++){
			for(int j=1;j<=m;j++){
				cin>>a[i][j];
			}
		}
		int flag=0;
		for(int i=1;i<=n-3;i++){
			for(int j=1;j<=m-3;j++){
				if(check(i,j)){
					flag=1;
				}
			}
		}
		if(flag==1){
			cout<<"Yes"<<endl;
		}	
		else{
			cout<<"No"<<endl; 
		}
	}
    return 0;
}
