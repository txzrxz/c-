题目描述：
现有一道数学题：已知两个正整数 a 和 b（a≤b）, a 到 b 之间（包含 a 和 b）所有的整数相乘可以得到一个乘积，求这个积的末尾从个位开始有多少个连续的 0。 例如 1 到 10 之间所有整数的乘积为 1×2×3×4×5×6×7×8×9×10=3628800，最后积的末尾有两个连续的 0。

输入格式：
一行，包含两个正整数 a 和 b（1≤a≤b≤100000），数与数之间以一个空格隔开。

输出格式：
一行，一个整数，表示积末尾从个位开始连续 0 的个数。

样例：
输入数据 1：
1 10

输出数据 1：
2

代码：
#include <bits/stdc++.h>
using namespace std;
/*
 * 统计区间 [a, b] 内所有整数的末尾 0 的总个数。
 *
 * 算法思路：
 *   一个数末尾有多少个 0，取决于它能分解出多少对 (2, 5) 的因子。
 *   例如 10 = 2 * 5，每出现一对 (2, 5) 就会贡献一个末尾 0。
 *   因此，遍历区间 [a, b] 内的每个数，将其分解，并累计 2 和 5 的因子个数。
 *   最后，末尾 0 的总数就是累计 2 和 5 的因子个数中的较小值。
 *
 * 输入：两个整数 a, b，表示区间的起止
 * 输出：区间内所有整数末尾 0 的总数
 */
int main(){
    int a,b,c2=0,c5=0; // a:区间起点, b:区间终点, c2:累计2的因子数量, c5:累计5的因子数量
    cin>>a>>b;
    for(int i=a;i<=b;i++){
        int t=i;
        // 统计当前数中因子2的个数
        while(t%2==0){
            c2++;
            t/=2;
        }
        // 统计当前数中因子5的个数
        while(t%5==0){
            c5++;
            t/=5;
        }
    }
    // 末尾0的总个数为累计2和5的个数中的较小值
    cout<<min(c2,c5);
    return 0;
}
